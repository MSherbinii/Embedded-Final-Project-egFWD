
Embedded Project Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000b10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b5  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  00001e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000984  00000000  00000000  0000270b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000540  00000000  00000000  0000328c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064c  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003e18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  74:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:


void APP_init(void){
	
	//Car LED initialization
	LED_Init(LED_CAR_PORT,LED_CAR_G_PIN);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_Init>
	LED_Init(LED_CAR_PORT,LED_CAR_Y_PIN);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_Init>
	LED_Init(LED_CAR_PORT,LED_CAR_R_PIN);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_Init>
	
	//Pedestrian LED initialization
	LED_Init(LED_PED_PORT,LED_PED_G_PIN);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_Init>
	LED_Init(LED_PED_PORT,LED_PED_Y_PIN);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_Init>
	LED_Init(LED_PED_PORT,LED_PED_R_PIN);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LED_Init>
	
	//BUTTON initialization
	BUTTON_Init(BUTTON_PORT,BUTTON_PIN);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 ce 01 	call	0x39c	; 0x39c <BUTTON_Init>
	
	//TIMER initialization
	TIMER_init();
  b4:	0e 94 cd 02 	call	0x59a	; 0x59a <TIMER_init>
	
	
	//Enable Global interrupts & setup rising edge detection for button
	sei();
  b8:	78 94       	sei
	RISING_EDGE_SETUP();
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
  c6:	08 95       	ret

000000c8 <APP_start>:
}
void APP_start(void)
{
  c8:	cf 93       	push	r28
	if (mode==NORMAL_MODE)
  ca:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mode>
  ce:	81 11       	cpse	r24, r1
  d0:	05 c1       	rjmp	.+522    	; 0x2dc <APP_start+0x214>
	{
		LED_ON(LED_PED_PORT,LED_PED_R_PIN);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
		switch (curr_car_LED)
  da:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <curr_car_LED>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	a9 f1       	breq	.+106    	; 0x14c <APP_start+0x84>
  e2:	20 f0       	brcs	.+8      	; 0xec <APP_start+0x24>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	09 f4       	brne	.+2      	; 0xea <APP_start+0x22>
  e8:	68 c0       	rjmp	.+208    	; 0x1ba <APP_start+0xf2>
  ea:	fe c0       	rjmp	.+508    	; 0x2e8 <APP_start+0x220>
		{
			case 0:
				LED_ON(LED_CAR_PORT,LED_CAR_R_PIN);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
				LED_OFF(LED_CAR_PORT,LED_CAR_Y_PIN);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
				LED_OFF(LED_CAR_PORT,LED_CAR_G_PIN);
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
				for (i=0; i<25; i++)
 104:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <i>
 108:	19 c0       	rjmp	.+50     	; 0x13c <APP_start+0x74>
				{
					TIMER_delay(190);
 10a:	8e eb       	ldi	r24, 0xBE	; 190
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 cf 02 	call	0x59e	; 0x59e <TIMER_delay>
					if (mode==PEDESTRIAN_MODE)
 112:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mode>
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	61 f4       	brne	.+24     	; 0x132 <APP_start+0x6a>
					{
						LED_OFF(LED_CAR_PORT,LED_CAR_R_PIN);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						LED_OFF(LED_PED_PORT,LED_PED_R_PIN);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						curr_ped_LED=2;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <curr_ped_LED>
						break;
 130:	09 c0       	rjmp	.+18     	; 0x144 <APP_start+0x7c>
		{
			case 0:
				LED_ON(LED_CAR_PORT,LED_CAR_R_PIN);
				LED_OFF(LED_CAR_PORT,LED_CAR_Y_PIN);
				LED_OFF(LED_CAR_PORT,LED_CAR_G_PIN);
				for (i=0; i<25; i++)
 132:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <i>
 13c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
 140:	89 31       	cpi	r24, 0x19	; 25
 142:	18 f3       	brcs	.-58     	; 0x10a <APP_start+0x42>
						LED_OFF(LED_PED_PORT,LED_PED_R_PIN);
						curr_ped_LED=2;
						break;
					}
				}
				curr_car_LED=2;
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <curr_car_LED>
				break;
 14a:	ce c0       	rjmp	.+412    	; 0x2e8 <APP_start+0x220>
			case 1:
				LED_OFF(LED_CAR_PORT,LED_CAR_R_PIN);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
				LED_OFF(LED_CAR_PORT,LED_CAR_G_PIN);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
				for (i=0; i<10; i++)
 15c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <i>
 160:	25 c0       	rjmp	.+74     	; 0x1ac <APP_start+0xe4>
				{
					LED_ON(LED_CAR_PORT,LED_CAR_Y_PIN);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
					TIMER_delay(220);
 16a:	8c ed       	ldi	r24, 0xDC	; 220
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 cf 02 	call	0x59e	; 0x59e <TIMER_delay>
					LED_OFF(LED_CAR_PORT,LED_CAR_Y_PIN);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
					TIMER_delay(220);
 17a:	8c ed       	ldi	r24, 0xDC	; 220
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 cf 02 	call	0x59e	; 0x59e <TIMER_delay>
					if (mode==PEDESTRIAN_MODE)
 182:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mode>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	61 f4       	brne	.+24     	; 0x1a2 <APP_start+0xda>
					{
						LED_OFF(LED_CAR_PORT,LED_CAR_Y_PIN);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						LED_OFF(LED_PED_PORT,LED_PED_R_PIN);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						curr_ped_LED=1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <curr_ped_LED>
						break;
 1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <APP_start+0xec>
				curr_car_LED=2;
				break;
			case 1:
				LED_OFF(LED_CAR_PORT,LED_CAR_R_PIN);
				LED_OFF(LED_CAR_PORT,LED_CAR_G_PIN);
				for (i=0; i<10; i++)
 1a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <i>
 1ac:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
 1b0:	8a 30       	cpi	r24, 0x0A	; 10
 1b2:	b8 f2       	brcs	.-82     	; 0x162 <APP_start+0x9a>
						curr_ped_LED=1;
						break;
						
					}
				}
				curr_car_LED=0;
 1b4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <curr_car_LED>
				break;
 1b8:	97 c0       	rjmp	.+302    	; 0x2e8 <APP_start+0x220>
			case 2:
				LED_ON(LED_CAR_PORT,LED_CAR_G_PIN);
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
				LED_OFF(LED_CAR_PORT,LED_CAR_Y_PIN);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
				LED_OFF(LED_CAR_PORT,LED_CAR_R_PIN);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
              	for (i=0; i<25; i++)
 1d2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <i>
 1d6:	19 c0       	rjmp	.+50     	; 0x20a <APP_start+0x142>
              	{
	              	TIMER_delay(190);
 1d8:	8e eb       	ldi	r24, 0xBE	; 190
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 cf 02 	call	0x59e	; 0x59e <TIMER_delay>
	              	if (mode==PEDESTRIAN_MODE)
 1e0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mode>
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	61 f4       	brne	.+24     	; 0x200 <APP_start+0x138>
	              	{
						LED_OFF(LED_CAR_PORT,LED_CAR_G_PIN);
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						LED_OFF(LED_PED_PORT,LED_PED_R_PIN);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						curr_ped_LED=1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <curr_ped_LED>
		              	break;
 1fe:	09 c0       	rjmp	.+18     	; 0x212 <APP_start+0x14a>
				break;
			case 2:
				LED_ON(LED_CAR_PORT,LED_CAR_G_PIN);
				LED_OFF(LED_CAR_PORT,LED_CAR_Y_PIN);
				LED_OFF(LED_CAR_PORT,LED_CAR_R_PIN);
              	for (i=0; i<25; i++)
 200:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <i>
 20a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
 20e:	89 31       	cpi	r24, 0x19	; 25
 210:	18 f3       	brcs	.-58     	; 0x1d8 <APP_start+0x110>
						LED_OFF(LED_PED_PORT,LED_PED_R_PIN);
						curr_ped_LED=1;
		              	break;
	              	}
              	}
				curr_car_LED=1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <curr_car_LED>
			    break;
 218:	67 c0       	rjmp	.+206    	; 0x2e8 <APP_start+0x220>
		else
		{
			
			for (u8 y=0; y<6; y++)
			{
				switch(curr_ped_LED)
 21a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <curr_ped_LED>
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	e9 f0       	breq	.+58     	; 0x25c <APP_start+0x194>
 222:	20 f0       	brcs	.+8      	; 0x22c <APP_start+0x164>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	09 f4       	brne	.+2      	; 0x22a <APP_start+0x162>
 228:	40 c0       	rjmp	.+128    	; 0x2aa <APP_start+0x1e2>
 22a:	56 c0       	rjmp	.+172    	; 0x2d8 <APP_start+0x210>
				{
					case 0:
						LED_ON(LED_PED_PORT,LED_PED_R_PIN);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
						LED_ON(LED_CAR_PORT,LED_CAR_G_PIN);
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
						TIMER_delay(5000);
 23c:	88 e8       	ldi	r24, 0x88	; 136
 23e:	93 e1       	ldi	r25, 0x13	; 19
 240:	0e 94 cf 02 	call	0x59e	; 0x59e <TIMER_delay>
						LED_OFF(LED_PED_PORT,LED_PED_R_PIN);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						LED_OFF(LED_CAR_PORT,LED_CAR_G_PIN);
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						curr_ped_LED=2;
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <curr_ped_LED>
						break;
 25a:	3e c0       	rjmp	.+124    	; 0x2d8 <APP_start+0x210>
					case 1:
						for (i=0; i<10; i++)
 25c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <i>
 260:	1d c0       	rjmp	.+58     	; 0x29c <APP_start+0x1d4>
						{
							LED_ON(LED_CAR_PORT,LED_CAR_Y_PIN);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
							LED_ON(LED_PED_PORT,LED_PED_Y_PIN);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
							TIMER_delay(220);
 272:	8c ed       	ldi	r24, 0xDC	; 220
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 cf 02 	call	0x59e	; 0x59e <TIMER_delay>
							LED_OFF(LED_CAR_PORT,LED_CAR_Y_PIN);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
							LED_OFF(LED_PED_PORT,LED_PED_Y_PIN);
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
							TIMER_delay(220);	
 28a:	8c ed       	ldi	r24, 0xDC	; 220
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 cf 02 	call	0x59e	; 0x59e <TIMER_delay>
						LED_OFF(LED_PED_PORT,LED_PED_R_PIN);
						LED_OFF(LED_CAR_PORT,LED_CAR_G_PIN);
						curr_ped_LED=2;
						break;
					case 1:
						for (i=0; i<10; i++)
 292:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <i>
 29c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
 2a0:	8a 30       	cpi	r24, 0x0A	; 10
 2a2:	f8 f2       	brcs	.-66     	; 0x262 <APP_start+0x19a>
							TIMER_delay(220);
							LED_OFF(LED_CAR_PORT,LED_CAR_Y_PIN);
							LED_OFF(LED_PED_PORT,LED_PED_Y_PIN);
							TIMER_delay(220);	
						}
						curr_ped_LED=0;
 2a4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <curr_ped_LED>
						break;
 2a8:	17 c0       	rjmp	.+46     	; 0x2d8 <APP_start+0x210>
					case 2:
						LED_ON(LED_PED_PORT,LED_PED_G_PIN);
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
						LED_ON(LED_CAR_PORT,LED_CAR_R_PIN);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LED_ON>
						TIMER_delay(5000);
 2ba:	88 e8       	ldi	r24, 0x88	; 136
 2bc:	93 e1       	ldi	r25, 0x13	; 19
 2be:	0e 94 cf 02 	call	0x59e	; 0x59e <TIMER_delay>
						LED_OFF(LED_CAR_PORT,LED_CAR_R_PIN);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						LED_OFF(LED_PED_PORT,LED_PED_G_PIN);
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LED_OFF>
						curr_ped_LED=1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <curr_ped_LED>
		}
	}
		else
		{
			
			for (u8 y=0; y<6; y++)
 2d8:	cf 5f       	subi	r28, 0xFF	; 255
 2da:	01 c0       	rjmp	.+2      	; 0x2de <APP_start+0x216>
 2dc:	c0 e0       	ldi	r28, 0x00	; 0
 2de:	c6 30       	cpi	r28, 0x06	; 6
 2e0:	08 f4       	brcc	.+2      	; 0x2e4 <APP_start+0x21c>
 2e2:	9b cf       	rjmp	.-202    	; 0x21a <APP_start+0x152>
						LED_OFF(LED_PED_PORT,LED_PED_G_PIN);
						curr_ped_LED=1;
						break;
				}
			}
			mode=NORMAL_MODE;
 2e4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <mode>
			
		}
}
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <__vector_1>:



// Interrupt used to switch to Pedestrian Mode and handle button press logic
ISR(EXT_INT_0)
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
	button_press_count++;
 30e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <button_press_count>
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <button_press_count>
	if (button_press_count == 1)
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	39 f4       	brne	.+14     	; 0x32a <__vector_1+0x3e>
	{
		button_press_time = TIMER_getCounterValue();
 31c:	0e 94 1e 03 	call	0x63c	; 0x63c <TIMER_getCounterValue>
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 326:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if (button_press_count >= 2)
 32a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <button_press_count>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	c8 f0       	brcs	.+50     	; 0x364 <__vector_1+0x78>
	{
		if (TIMER_getCounterValue() - button_press_time < LONG_PRESS_THRESHOLD)
 332:	0e 94 1e 03 	call	0x63c	; 0x63c <TIMER_getCounterValue>
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 33c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 340:	82 1b       	sub	r24, r18
 342:	93 0b       	sbc	r25, r19
 344:	8e 3e       	cpi	r24, 0xEE	; 238
 346:	92 40       	sbci	r25, 0x02	; 2
 348:	18 f4       	brcc	.+6      	; 0x350 <__vector_1+0x64>
		{
			button_press_count = 0;
 34a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <button_press_count>
			return;
 34e:	15 c0       	rjmp	.+42     	; 0x37a <__vector_1+0x8e>
		}
		else
		{
			button_press_count = 1;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <button_press_count>
			button_press_time = TIMER_getCounterValue();
 356:	0e 94 1e 03 	call	0x63c	; 0x63c <TIMER_getCounterValue>
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 360:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
	if (curr_car_LED == 0 || curr_car_LED == 1)
 364:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <curr_car_LED>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	38 f4       	brcc	.+14     	; 0x37a <__vector_1+0x8e>
	{
		if (mode != PEDESTRIAN_MODE)
 36c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <mode>
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	19 f0       	breq	.+6      	; 0x37a <__vector_1+0x8e>
		{
			mode = PEDESTRIAN_MODE;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <mode>
		}
	}
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	7f 91       	pop	r23
 388:	6f 91       	pop	r22
 38a:	5f 91       	pop	r21
 38c:	4f 91       	pop	r20
 38e:	3f 91       	pop	r19
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <BUTTON_Init>:
#include "button.h"

void BUTTON_Init(u8 BUTTON_u8Port, u8 BUTTON_u8Pin)
{
	DIO_voidSetPinDir(BUTTON_u8Port, BUTTON_u8Pin, DIO_U8_INPUT);
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_voidSetPinDir>
 3a2:	08 95       	ret

000003a4 <LED_Init>:
#include "led.h"

void LED_Init(u8 LED_u8Port, u8 LED_u8Pin)
{
	DIO_voidSetPinDir(LED_u8Port,LED_u8Pin, DIO_U8_OUTPUT);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_voidSetPinDir>
 3aa:	08 95       	ret

000003ac <LED_ON>:
}

void LED_ON(u8 LED_u8Port, u8 LED_u8Pin)
{
	DIO_voidSetPinVal(LED_u8Port,LED_u8Pin, DIO_U8_HIGH);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	0e 94 58 02 	call	0x4b0	; 0x4b0 <DIO_voidSetPinVal>
 3b2:	08 95       	ret

000003b4 <LED_OFF>:
}

void LED_OFF(u8 LED_u8Port, u8 LED_u8Pin)
{
	DIO_voidSetPinVal(LED_u8Port,LED_u8Pin, DIO_U8_LOW);
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <DIO_voidSetPinVal>
 3ba:	08 95       	ret

000003bc <main>:


int main(void)
{
	//Initialize
	APP_init();
 3bc:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	
	//Main loop
	while(1)
	{
		APP_start();
 3c0:	0e 94 64 00 	call	0xc8	; 0xc8 <APP_start>
 3c4:	fd cf       	rjmp	.-6      	; 0x3c0 <main+0x4>

000003c6 <DIO_voidSetPinDir>:
#include "DIO_Register.h"

void DIO_voidSetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin , u8 Copy_u8Dir)
{
	
	switch(Copy_u8Port)
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	11 f1       	breq	.+68     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3ca:	30 f0       	brcs	.+12     	; 0x3d8 <DIO_voidSetPinDir+0x12>
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	d1 f1       	breq	.+116    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <DIO_voidSetPinDir+0x10>
 3d4:	52 c0       	rjmp	.+164    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 3d6:	08 95       	ret
	{
		
		case DIO_U8_PORTA :
		if( Copy_u8Dir == DIO_U8_OUTPUT)
 3d8:	41 30       	cpi	r20, 0x01	; 1
 3da:	59 f4       	brne	.+22     	; 0x3f2 <DIO_voidSetPinDir+0x2c>
		{
			SET_BIT(DDRA,Copy_u8Pin);
 3dc:	2a b3       	in	r18, 0x1a	; 26
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_voidSetPinDir+0x22>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_voidSetPinDir+0x1e>
 3ec:	82 2b       	or	r24, r18
 3ee:	8a bb       	out	0x1a, r24	; 26
 3f0:	08 95       	ret
		}
		else if ( Copy_u8Dir ==DIO_U8_INPUT)
 3f2:	41 11       	cpse	r20, r1
 3f4:	5c c0       	rjmp	.+184    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		{
			CLEAR_BIT(DDRA,Copy_u8Pin);
 3f6:	2a b3       	in	r18, 0x1a	; 26
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_voidSetPinDir+0x38>
 406:	80 95       	com	r24
 408:	82 23       	and	r24, r18
 40a:	8a bb       	out	0x1a, r24	; 26
 40c:	08 95       	ret
		}
		break;
		
		case DIO_U8_PORTB :
		if( Copy_u8Dir == DIO_U8_OUTPUT)
 40e:	41 30       	cpi	r20, 0x01	; 1
 410:	59 f4       	brne	.+22     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		{
			SET_BIT(DDRB,Copy_u8Pin);
 412:	27 b3       	in	r18, 0x17	; 23
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	82 2b       	or	r24, r18
 424:	87 bb       	out	0x17, r24	; 23
 426:	08 95       	ret
		}
		else if ( Copy_u8Dir ==DIO_U8_INPUT)
 428:	41 11       	cpse	r20, r1
 42a:	41 c0       	rjmp	.+130    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		{
			CLEAR_BIT(DDRB,Copy_u8Pin);
 42c:	27 b3       	in	r18, 0x17	; 23
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	80 95       	com	r24
 43e:	82 23       	and	r24, r18
 440:	87 bb       	out	0x17, r24	; 23
 442:	08 95       	ret
		}
		break;
		
		case DIO_U8_PORTC :
		if( Copy_u8Dir == DIO_U8_OUTPUT)
 444:	41 30       	cpi	r20, 0x01	; 1
 446:	59 f4       	brne	.+22     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
		{
			SET_BIT(DDRC,Copy_u8Pin);
 448:	24 b3       	in	r18, 0x14	; 20
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	82 2b       	or	r24, r18
 45a:	84 bb       	out	0x14, r24	; 20
 45c:	08 95       	ret
		}
		else if ( Copy_u8Dir ==DIO_U8_INPUT)
 45e:	41 11       	cpse	r20, r1
 460:	26 c0       	rjmp	.+76     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		{
			CLEAR_BIT(DDRC,Copy_u8Pin);
 462:	24 b3       	in	r18, 0x14	; 20
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	80 95       	com	r24
 474:	82 23       	and	r24, r18
 476:	84 bb       	out	0x14, r24	; 20
 478:	08 95       	ret
		}
		break;
		
		case DIO_U8_PORTD :
		if( Copy_u8Dir == DIO_U8_OUTPUT)
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	59 f4       	brne	.+22     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
		{
			SET_BIT(DDRD,Copy_u8Pin);
 47e:	21 b3       	in	r18, 0x11	; 17
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	82 2b       	or	r24, r18
 490:	81 bb       	out	0x11, r24	; 17
 492:	08 95       	ret
		}
		else if ( Copy_u8Dir ==DIO_U8_INPUT)
 494:	41 11       	cpse	r20, r1
 496:	0b c0       	rjmp	.+22     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		{
			CLEAR_BIT(DDRD,Copy_u8Pin);
 498:	21 b3       	in	r18, 0x11	; 17
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a8:	80 95       	com	r24
 4aa:	82 23       	and	r24, r18
 4ac:	81 bb       	out	0x11, r24	; 17
 4ae:	08 95       	ret

000004b0 <DIO_voidSetPinVal>:
	}
}

void DIO_voidSetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin , u8 Copy_u8Val)
{
	switch(Copy_u8Port)
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	11 f1       	breq	.+68     	; 0x4f8 <DIO_voidSetPinVal+0x48>
 4b4:	30 f0       	brcs	.+12     	; 0x4c2 <DIO_voidSetPinVal+0x12>
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	d1 f1       	breq	.+116    	; 0x52e <DIO_voidSetPinVal+0x7e>
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <DIO_voidSetPinVal+0x10>
 4be:	52 c0       	rjmp	.+164    	; 0x564 <DIO_voidSetPinVal+0xb4>
 4c0:	08 95       	ret
	{
		
		case DIO_U8_PORTA :
		if( Copy_u8Val == DIO_U8_HIGH )
 4c2:	41 30       	cpi	r20, 0x01	; 1
 4c4:	59 f4       	brne	.+22     	; 0x4dc <DIO_voidSetPinVal+0x2c>
		{
			SET_BIT(PORTA,Copy_u8Pin);
 4c6:	2b b3       	in	r18, 0x1b	; 27
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_voidSetPinVal+0x22>
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_voidSetPinVal+0x1e>
 4d6:	82 2b       	or	r24, r18
 4d8:	8b bb       	out	0x1b, r24	; 27
 4da:	08 95       	ret
		}
		else if ( Copy_u8Val ==DIO_U8_LOW )
 4dc:	41 11       	cpse	r20, r1
 4de:	5c c0       	rjmp	.+184    	; 0x598 <DIO_voidSetPinVal+0xe8>
		{
			CLEAR_BIT(PORTA,Copy_u8Pin);
 4e0:	2b b3       	in	r18, 0x1b	; 27
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_voidSetPinVal+0x3c>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_voidSetPinVal+0x38>
 4f0:	80 95       	com	r24
 4f2:	82 23       	and	r24, r18
 4f4:	8b bb       	out	0x1b, r24	; 27
 4f6:	08 95       	ret
		}
		break;
		
		case DIO_U8_PORTB :
		if( Copy_u8Val == DIO_U8_HIGH )
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	59 f4       	brne	.+22     	; 0x512 <DIO_voidSetPinVal+0x62>
		{
			SET_BIT(PORTB,Copy_u8Pin);
 4fc:	28 b3       	in	r18, 0x18	; 24
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_voidSetPinVal+0x58>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_voidSetPinVal+0x54>
 50c:	82 2b       	or	r24, r18
 50e:	88 bb       	out	0x18, r24	; 24
 510:	08 95       	ret
		}
		else if ( Copy_u8Val ==DIO_U8_LOW )
 512:	41 11       	cpse	r20, r1
 514:	41 c0       	rjmp	.+130    	; 0x598 <DIO_voidSetPinVal+0xe8>
		{
			CLEAR_BIT(PORTB,Copy_u8Pin);
 516:	28 b3       	in	r18, 0x18	; 24
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_voidSetPinVal+0x72>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_voidSetPinVal+0x6e>
 526:	80 95       	com	r24
 528:	82 23       	and	r24, r18
 52a:	88 bb       	out	0x18, r24	; 24
 52c:	08 95       	ret
		}
		break;
		
		case DIO_U8_PORTC :
		if( Copy_u8Val == DIO_U8_HIGH )
 52e:	41 30       	cpi	r20, 0x01	; 1
 530:	59 f4       	brne	.+22     	; 0x548 <DIO_voidSetPinVal+0x98>
		{
			SET_BIT(PORTC,Copy_u8Pin);
 532:	25 b3       	in	r18, 0x15	; 21
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_voidSetPinVal+0x8e>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_voidSetPinVal+0x8a>
 542:	82 2b       	or	r24, r18
 544:	85 bb       	out	0x15, r24	; 21
 546:	08 95       	ret
		}
		else if ( Copy_u8Val ==DIO_U8_LOW )
 548:	41 11       	cpse	r20, r1
 54a:	26 c0       	rjmp	.+76     	; 0x598 <DIO_voidSetPinVal+0xe8>
		{
			CLEAR_BIT(PORTC,Copy_u8Pin);
 54c:	25 b3       	in	r18, 0x15	; 21
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_voidSetPinVal+0xa8>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_voidSetPinVal+0xa4>
 55c:	80 95       	com	r24
 55e:	82 23       	and	r24, r18
 560:	85 bb       	out	0x15, r24	; 21
 562:	08 95       	ret
		}
		break;
		
		case DIO_U8_PORTD :
		if( Copy_u8Val == DIO_U8_HIGH )
 564:	41 30       	cpi	r20, 0x01	; 1
 566:	59 f4       	brne	.+22     	; 0x57e <DIO_voidSetPinVal+0xce>
		{
			SET_BIT(PORTD,Copy_u8Pin);
 568:	22 b3       	in	r18, 0x12	; 18
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_voidSetPinVal+0xc4>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_voidSetPinVal+0xc0>
 578:	82 2b       	or	r24, r18
 57a:	82 bb       	out	0x12, r24	; 18
 57c:	08 95       	ret
		}
		else if ( Copy_u8Val ==DIO_U8_LOW )
 57e:	41 11       	cpse	r20, r1
 580:	0b c0       	rjmp	.+22     	; 0x598 <DIO_voidSetPinVal+0xe8>
		{
			CLEAR_BIT(PORTD,Copy_u8Pin);
 582:	22 b3       	in	r18, 0x12	; 18
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_voidSetPinVal+0xde>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_voidSetPinVal+0xda>
 592:	80 95       	com	r24
 594:	82 23       	and	r24, r18
 596:	82 bb       	out	0x12, r24	; 18
 598:	08 95       	ret

0000059a <TIMER_init>:
#include "math.h"
#include "BIT_Math.h"


void TIMER_init(){
	TCCR0 = 0x00; //normal mode
 59a:	13 be       	out	0x33, r1	; 51
 59c:	08 95       	ret

0000059e <TIMER_delay>:
}

void TIMER_delay(u16 millisec){
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	8c 01       	movw	r16, r24
	u32 overflowCnt = 0;
	
	// Calculate Ttick, Tmaxdelay, and Noverflows based on 256 prescaler
	Ttick = Prescaler / FCPU;      
	Tmaxdelay = 65.56;         
	Noverflows = ceil(millisec / Tmaxdelay);
 5a8:	bc 01       	movw	r22, r24
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 45 04 	call	0x88a	; 0x88a <__floatunsisf>
 5b2:	28 eb       	ldi	r18, 0xB8	; 184
 5b4:	3e e1       	ldi	r19, 0x1E	; 30
 5b6:	43 e8       	ldi	r20, 0x83	; 131
 5b8:	52 e4       	ldi	r21, 0x42	; 66
 5ba:	0e 94 a4 03 	call	0x748	; 0x748 <__divsf3>
 5be:	0e 94 8d 03 	call	0x71a	; 0x71a <ceil>
 5c2:	0e 94 16 04 	call	0x82c	; 0x82c <__fixunssfsi>
 5c6:	eb 01       	movw	r28, r22
	
	// Calculate TimerInitial based on remaining time after overflows
	TimerInitial = round((Tmaxdelay - millisec/Noverflows) / Ttick);
 5c8:	c8 01       	movw	r24, r16
 5ca:	be 01       	movw	r22, r28
 5cc:	0e 94 38 05 	call	0xa70	; 0xa70 <__udivmodhi4>
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 45 04 	call	0x88a	; 0x88a <__floatunsisf>
 5d8:	9b 01       	movw	r18, r22
 5da:	ac 01       	movw	r20, r24
 5dc:	68 eb       	ldi	r22, 0xB8	; 184
 5de:	7e e1       	ldi	r23, 0x1E	; 30
 5e0:	83 e8       	ldi	r24, 0x83	; 131
 5e2:	92 e4       	ldi	r25, 0x42	; 66
 5e4:	0e 94 20 03 	call	0x640	; 0x640 <__subsf3>
 5e8:	2f e6       	ldi	r18, 0x6F	; 111
 5ea:	32 e1       	ldi	r19, 0x12	; 18
 5ec:	43 e8       	ldi	r20, 0x83	; 131
 5ee:	5e e3       	ldi	r21, 0x3E	; 62
 5f0:	0e 94 a4 03 	call	0x748	; 0x748 <__divsf3>
 5f4:	0e 94 14 05 	call	0xa28	; 0xa28 <round>
 5f8:	0e 94 16 04 	call	0x82c	; 0x82c <__fixunssfsi>
	
	// Set initial timer count
	TCNT0 = TimerInitial;
 5fc:	62 bf       	out	0x32, r22	; 50
	
	// Start timer with 256 prescaler
	TCCR0 |= (1 << CS02);
 5fe:	83 b7       	in	r24, 0x33	; 51
 600:	84 60       	ori	r24, 0x04	; 4
 602:	83 bf       	out	0x33, r24	; 51

void TIMER_delay(u16 millisec){
	u16 Noverflows, TimerInitial;
	double Tmaxdelay, Ttick;
	double Prescaler=256,FCPU=1000;
	u32 overflowCnt = 0;
 604:	40 e0       	ldi	r20, 0x00	; 0
 606:	50 e0       	ldi	r21, 0x00	; 0
 608:	ba 01       	movw	r22, r20
	
	// Start timer with 256 prescaler
	TCCR0 |= (1 << CS02);
	
	// Wait for desired number of overflows
	while (overflowCnt < Noverflows) {
 60a:	0a c0       	rjmp	.+20     	; 0x620 <TIMER_delay+0x82>
		// Busy wait until overflow flag is set
		while (GET_BIT(TIFR, 0) == 0);
 60c:	08 b6       	in	r0, 0x38	; 56
 60e:	00 fe       	sbrs	r0, 0
 610:	fd cf       	rjmp	.-6      	; 0x60c <TIMER_delay+0x6e>
		
		// Clear overflow flag
		SET_BIT(TIFR, 0);
 612:	88 b7       	in	r24, 0x38	; 56
 614:	81 60       	ori	r24, 0x01	; 1
 616:	88 bf       	out	0x38, r24	; 56
		
		// Increment overflow count
		overflowCnt++;
 618:	4f 5f       	subi	r20, 0xFF	; 255
 61a:	5f 4f       	sbci	r21, 0xFF	; 255
 61c:	6f 4f       	sbci	r22, 0xFF	; 255
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
	
	// Start timer with 256 prescaler
	TCCR0 |= (1 << CS02);
	
	// Wait for desired number of overflows
	while (overflowCnt < Noverflows) {
 620:	ce 01       	movw	r24, r28
 622:	a0 e0       	ldi	r26, 0x00	; 0
 624:	b0 e0       	ldi	r27, 0x00	; 0
 626:	48 17       	cp	r20, r24
 628:	59 07       	cpc	r21, r25
 62a:	6a 07       	cpc	r22, r26
 62c:	7b 07       	cpc	r23, r27
 62e:	70 f3       	brcs	.-36     	; 0x60c <TIMER_delay+0x6e>
		// Increment overflow count
		overflowCnt++;
	}
	
	// Stop timer
	TCCR0 = 0x00;
 630:	13 be       	out	0x33, r1	; 51
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <TIMER_getCounterValue>:
u8 TIMER_getCounterValue(void) {
	return TCNT0;
 63c:	82 b7       	in	r24, 0x32	; 50
 63e:	08 95       	ret

00000640 <__subsf3>:
 640:	50 58       	subi	r21, 0x80	; 128

00000642 <__addsf3>:
 642:	bb 27       	eor	r27, r27
 644:	aa 27       	eor	r26, r26
 646:	0e 94 38 03 	call	0x670	; 0x670 <__addsf3x>
 64a:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_round>
 64e:	0e 94 b4 04 	call	0x968	; 0x968 <__fp_pscA>
 652:	38 f0       	brcs	.+14     	; 0x662 <__addsf3+0x20>
 654:	0e 94 bb 04 	call	0x976	; 0x976 <__fp_pscB>
 658:	20 f0       	brcs	.+8      	; 0x662 <__addsf3+0x20>
 65a:	39 f4       	brne	.+14     	; 0x66a <__addsf3+0x28>
 65c:	9f 3f       	cpi	r25, 0xFF	; 255
 65e:	19 f4       	brne	.+6      	; 0x666 <__addsf3+0x24>
 660:	26 f4       	brtc	.+8      	; 0x66a <__addsf3+0x28>
 662:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_nan>
 666:	0e f4       	brtc	.+2      	; 0x66a <__addsf3+0x28>
 668:	e0 95       	com	r30
 66a:	e7 fb       	bst	r30, 7
 66c:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_inf>

00000670 <__addsf3x>:
 670:	e9 2f       	mov	r30, r25
 672:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_split3>
 676:	58 f3       	brcs	.-42     	; 0x64e <__addsf3+0xc>
 678:	ba 17       	cp	r27, r26
 67a:	62 07       	cpc	r22, r18
 67c:	73 07       	cpc	r23, r19
 67e:	84 07       	cpc	r24, r20
 680:	95 07       	cpc	r25, r21
 682:	20 f0       	brcs	.+8      	; 0x68c <__addsf3x+0x1c>
 684:	79 f4       	brne	.+30     	; 0x6a4 <__addsf3x+0x34>
 686:	a6 f5       	brtc	.+104    	; 0x6f0 <__addsf3x+0x80>
 688:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_zero>
 68c:	0e f4       	brtc	.+2      	; 0x690 <__addsf3x+0x20>
 68e:	e0 95       	com	r30
 690:	0b 2e       	mov	r0, r27
 692:	ba 2f       	mov	r27, r26
 694:	a0 2d       	mov	r26, r0
 696:	0b 01       	movw	r0, r22
 698:	b9 01       	movw	r22, r18
 69a:	90 01       	movw	r18, r0
 69c:	0c 01       	movw	r0, r24
 69e:	ca 01       	movw	r24, r20
 6a0:	a0 01       	movw	r20, r0
 6a2:	11 24       	eor	r1, r1
 6a4:	ff 27       	eor	r31, r31
 6a6:	59 1b       	sub	r21, r25
 6a8:	99 f0       	breq	.+38     	; 0x6d0 <__addsf3x+0x60>
 6aa:	59 3f       	cpi	r21, 0xF9	; 249
 6ac:	50 f4       	brcc	.+20     	; 0x6c2 <__addsf3x+0x52>
 6ae:	50 3e       	cpi	r21, 0xE0	; 224
 6b0:	68 f1       	brcs	.+90     	; 0x70c <__addsf3x+0x9c>
 6b2:	1a 16       	cp	r1, r26
 6b4:	f0 40       	sbci	r31, 0x00	; 0
 6b6:	a2 2f       	mov	r26, r18
 6b8:	23 2f       	mov	r18, r19
 6ba:	34 2f       	mov	r19, r20
 6bc:	44 27       	eor	r20, r20
 6be:	58 5f       	subi	r21, 0xF8	; 248
 6c0:	f3 cf       	rjmp	.-26     	; 0x6a8 <__addsf3x+0x38>
 6c2:	46 95       	lsr	r20
 6c4:	37 95       	ror	r19
 6c6:	27 95       	ror	r18
 6c8:	a7 95       	ror	r26
 6ca:	f0 40       	sbci	r31, 0x00	; 0
 6cc:	53 95       	inc	r21
 6ce:	c9 f7       	brne	.-14     	; 0x6c2 <__addsf3x+0x52>
 6d0:	7e f4       	brtc	.+30     	; 0x6f0 <__addsf3x+0x80>
 6d2:	1f 16       	cp	r1, r31
 6d4:	ba 0b       	sbc	r27, r26
 6d6:	62 0b       	sbc	r22, r18
 6d8:	73 0b       	sbc	r23, r19
 6da:	84 0b       	sbc	r24, r20
 6dc:	ba f0       	brmi	.+46     	; 0x70c <__addsf3x+0x9c>
 6de:	91 50       	subi	r25, 0x01	; 1
 6e0:	a1 f0       	breq	.+40     	; 0x70a <__addsf3x+0x9a>
 6e2:	ff 0f       	add	r31, r31
 6e4:	bb 1f       	adc	r27, r27
 6e6:	66 1f       	adc	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	88 1f       	adc	r24, r24
 6ec:	c2 f7       	brpl	.-16     	; 0x6de <__addsf3x+0x6e>
 6ee:	0e c0       	rjmp	.+28     	; 0x70c <__addsf3x+0x9c>
 6f0:	ba 0f       	add	r27, r26
 6f2:	62 1f       	adc	r22, r18
 6f4:	73 1f       	adc	r23, r19
 6f6:	84 1f       	adc	r24, r20
 6f8:	48 f4       	brcc	.+18     	; 0x70c <__addsf3x+0x9c>
 6fa:	87 95       	ror	r24
 6fc:	77 95       	ror	r23
 6fe:	67 95       	ror	r22
 700:	b7 95       	ror	r27
 702:	f7 95       	ror	r31
 704:	9e 3f       	cpi	r25, 0xFE	; 254
 706:	08 f0       	brcs	.+2      	; 0x70a <__addsf3x+0x9a>
 708:	b0 cf       	rjmp	.-160    	; 0x66a <__addsf3+0x28>
 70a:	93 95       	inc	r25
 70c:	88 0f       	add	r24, r24
 70e:	08 f0       	brcs	.+2      	; 0x712 <__addsf3x+0xa2>
 710:	99 27       	eor	r25, r25
 712:	ee 0f       	add	r30, r30
 714:	97 95       	ror	r25
 716:	87 95       	ror	r24
 718:	08 95       	ret

0000071a <ceil>:
 71a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_trunc>
 71e:	90 f0       	brcs	.+36     	; 0x744 <ceil+0x2a>
 720:	9f 37       	cpi	r25, 0x7F	; 127
 722:	48 f4       	brcc	.+18     	; 0x736 <ceil+0x1c>
 724:	91 11       	cpse	r25, r1
 726:	16 f4       	brtc	.+4      	; 0x72c <ceil+0x12>
 728:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	80 e8       	ldi	r24, 0x80	; 128
 732:	9f e3       	ldi	r25, 0x3F	; 63
 734:	08 95       	ret
 736:	26 f0       	brts	.+8      	; 0x740 <ceil+0x26>
 738:	1b 16       	cp	r1, r27
 73a:	61 1d       	adc	r22, r1
 73c:	71 1d       	adc	r23, r1
 73e:	81 1d       	adc	r24, r1
 740:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_mintl>
 744:	0c 94 a3 04 	jmp	0x946	; 0x946 <__fp_mpack>

00000748 <__divsf3>:
 748:	0e 94 b8 03 	call	0x770	; 0x770 <__divsf3x>
 74c:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_round>
 750:	0e 94 bb 04 	call	0x976	; 0x976 <__fp_pscB>
 754:	58 f0       	brcs	.+22     	; 0x76c <__divsf3+0x24>
 756:	0e 94 b4 04 	call	0x968	; 0x968 <__fp_pscA>
 75a:	40 f0       	brcs	.+16     	; 0x76c <__divsf3+0x24>
 75c:	29 f4       	brne	.+10     	; 0x768 <__divsf3+0x20>
 75e:	5f 3f       	cpi	r21, 0xFF	; 255
 760:	29 f0       	breq	.+10     	; 0x76c <__divsf3+0x24>
 762:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_inf>
 766:	51 11       	cpse	r21, r1
 768:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>
 76c:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_nan>

00000770 <__divsf3x>:
 770:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__fp_split3>
 774:	68 f3       	brcs	.-38     	; 0x750 <__divsf3+0x8>

00000776 <__divsf3_pse>:
 776:	99 23       	and	r25, r25
 778:	b1 f3       	breq	.-20     	; 0x766 <__divsf3+0x1e>
 77a:	55 23       	and	r21, r21
 77c:	91 f3       	breq	.-28     	; 0x762 <__divsf3+0x1a>
 77e:	95 1b       	sub	r25, r21
 780:	55 0b       	sbc	r21, r21
 782:	bb 27       	eor	r27, r27
 784:	aa 27       	eor	r26, r26
 786:	62 17       	cp	r22, r18
 788:	73 07       	cpc	r23, r19
 78a:	84 07       	cpc	r24, r20
 78c:	38 f0       	brcs	.+14     	; 0x79c <__divsf3_pse+0x26>
 78e:	9f 5f       	subi	r25, 0xFF	; 255
 790:	5f 4f       	sbci	r21, 0xFF	; 255
 792:	22 0f       	add	r18, r18
 794:	33 1f       	adc	r19, r19
 796:	44 1f       	adc	r20, r20
 798:	aa 1f       	adc	r26, r26
 79a:	a9 f3       	breq	.-22     	; 0x786 <__divsf3_pse+0x10>
 79c:	35 d0       	rcall	.+106    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 79e:	0e 2e       	mov	r0, r30
 7a0:	3a f0       	brmi	.+14     	; 0x7b0 <__divsf3_pse+0x3a>
 7a2:	e0 e8       	ldi	r30, 0x80	; 128
 7a4:	32 d0       	rcall	.+100    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7a6:	91 50       	subi	r25, 0x01	; 1
 7a8:	50 40       	sbci	r21, 0x00	; 0
 7aa:	e6 95       	lsr	r30
 7ac:	00 1c       	adc	r0, r0
 7ae:	ca f7       	brpl	.-14     	; 0x7a2 <__divsf3_pse+0x2c>
 7b0:	2b d0       	rcall	.+86     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7b2:	fe 2f       	mov	r31, r30
 7b4:	29 d0       	rcall	.+82     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	bb 1f       	adc	r27, r27
 7be:	26 17       	cp	r18, r22
 7c0:	37 07       	cpc	r19, r23
 7c2:	48 07       	cpc	r20, r24
 7c4:	ab 07       	cpc	r26, r27
 7c6:	b0 e8       	ldi	r27, 0x80	; 128
 7c8:	09 f0       	breq	.+2      	; 0x7cc <__divsf3_pse+0x56>
 7ca:	bb 0b       	sbc	r27, r27
 7cc:	80 2d       	mov	r24, r0
 7ce:	bf 01       	movw	r22, r30
 7d0:	ff 27       	eor	r31, r31
 7d2:	93 58       	subi	r25, 0x83	; 131
 7d4:	5f 4f       	sbci	r21, 0xFF	; 255
 7d6:	3a f0       	brmi	.+14     	; 0x7e6 <__divsf3_pse+0x70>
 7d8:	9e 3f       	cpi	r25, 0xFE	; 254
 7da:	51 05       	cpc	r21, r1
 7dc:	78 f0       	brcs	.+30     	; 0x7fc <__divsf3_pse+0x86>
 7de:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_inf>
 7e2:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	e4 f3       	brlt	.-8      	; 0x7e2 <__divsf3_pse+0x6c>
 7ea:	98 3e       	cpi	r25, 0xE8	; 232
 7ec:	d4 f3       	brlt	.-12     	; 0x7e2 <__divsf3_pse+0x6c>
 7ee:	86 95       	lsr	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f7 95       	ror	r31
 7f8:	9f 5f       	subi	r25, 0xFF	; 255
 7fa:	c9 f7       	brne	.-14     	; 0x7ee <__divsf3_pse+0x78>
 7fc:	88 0f       	add	r24, r24
 7fe:	91 1d       	adc	r25, r1
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	97 f9       	bld	r25, 7
 806:	08 95       	ret
 808:	e1 e0       	ldi	r30, 0x01	; 1
 80a:	66 0f       	add	r22, r22
 80c:	77 1f       	adc	r23, r23
 80e:	88 1f       	adc	r24, r24
 810:	bb 1f       	adc	r27, r27
 812:	62 17       	cp	r22, r18
 814:	73 07       	cpc	r23, r19
 816:	84 07       	cpc	r24, r20
 818:	ba 07       	cpc	r27, r26
 81a:	20 f0       	brcs	.+8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 81c:	62 1b       	sub	r22, r18
 81e:	73 0b       	sbc	r23, r19
 820:	84 0b       	sbc	r24, r20
 822:	ba 0b       	sbc	r27, r26
 824:	ee 1f       	adc	r30, r30
 826:	88 f7       	brcc	.-30     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 828:	e0 95       	com	r30
 82a:	08 95       	ret

0000082c <__fixunssfsi>:
 82c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fp_splitA>
 830:	88 f0       	brcs	.+34     	; 0x854 <__fixunssfsi+0x28>
 832:	9f 57       	subi	r25, 0x7F	; 127
 834:	98 f0       	brcs	.+38     	; 0x85c <__fixunssfsi+0x30>
 836:	b9 2f       	mov	r27, r25
 838:	99 27       	eor	r25, r25
 83a:	b7 51       	subi	r27, 0x17	; 23
 83c:	b0 f0       	brcs	.+44     	; 0x86a <__stack+0xb>
 83e:	e1 f0       	breq	.+56     	; 0x878 <__stack+0x19>
 840:	66 0f       	add	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	1a f0       	brmi	.+6      	; 0x850 <__fixunssfsi+0x24>
 84a:	ba 95       	dec	r27
 84c:	c9 f7       	brne	.-14     	; 0x840 <__fixunssfsi+0x14>
 84e:	14 c0       	rjmp	.+40     	; 0x878 <__stack+0x19>
 850:	b1 30       	cpi	r27, 0x01	; 1
 852:	91 f0       	breq	.+36     	; 0x878 <__stack+0x19>
 854:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_zero>
 858:	b1 e0       	ldi	r27, 0x01	; 1
 85a:	08 95       	ret
 85c:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__fp_zero>
 860:	67 2f       	mov	r22, r23
 862:	78 2f       	mov	r23, r24
 864:	88 27       	eor	r24, r24
 866:	b8 5f       	subi	r27, 0xF8	; 248
 868:	39 f0       	breq	.+14     	; 0x878 <__stack+0x19>
 86a:	b9 3f       	cpi	r27, 0xF9	; 249
 86c:	cc f3       	brlt	.-14     	; 0x860 <__stack+0x1>
 86e:	86 95       	lsr	r24
 870:	77 95       	ror	r23
 872:	67 95       	ror	r22
 874:	b3 95       	inc	r27
 876:	d9 f7       	brne	.-10     	; 0x86e <__stack+0xf>
 878:	3e f4       	brtc	.+14     	; 0x888 <__stack+0x29>
 87a:	90 95       	com	r25
 87c:	80 95       	com	r24
 87e:	70 95       	com	r23
 880:	61 95       	neg	r22
 882:	7f 4f       	sbci	r23, 0xFF	; 255
 884:	8f 4f       	sbci	r24, 0xFF	; 255
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	08 95       	ret

0000088a <__floatunsisf>:
 88a:	e8 94       	clt
 88c:	09 c0       	rjmp	.+18     	; 0x8a0 <__floatsisf+0x12>

0000088e <__floatsisf>:
 88e:	97 fb       	bst	r25, 7
 890:	3e f4       	brtc	.+14     	; 0x8a0 <__floatsisf+0x12>
 892:	90 95       	com	r25
 894:	80 95       	com	r24
 896:	70 95       	com	r23
 898:	61 95       	neg	r22
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	99 23       	and	r25, r25
 8a2:	a9 f0       	breq	.+42     	; 0x8ce <__floatsisf+0x40>
 8a4:	f9 2f       	mov	r31, r25
 8a6:	96 e9       	ldi	r25, 0x96	; 150
 8a8:	bb 27       	eor	r27, r27
 8aa:	93 95       	inc	r25
 8ac:	f6 95       	lsr	r31
 8ae:	87 95       	ror	r24
 8b0:	77 95       	ror	r23
 8b2:	67 95       	ror	r22
 8b4:	b7 95       	ror	r27
 8b6:	f1 11       	cpse	r31, r1
 8b8:	f8 cf       	rjmp	.-16     	; 0x8aa <__floatsisf+0x1c>
 8ba:	fa f4       	brpl	.+62     	; 0x8fa <__floatsisf+0x6c>
 8bc:	bb 0f       	add	r27, r27
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__floatsisf+0x36>
 8c0:	60 ff       	sbrs	r22, 0
 8c2:	1b c0       	rjmp	.+54     	; 0x8fa <__floatsisf+0x6c>
 8c4:	6f 5f       	subi	r22, 0xFF	; 255
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	16 c0       	rjmp	.+44     	; 0x8fa <__floatsisf+0x6c>
 8ce:	88 23       	and	r24, r24
 8d0:	11 f0       	breq	.+4      	; 0x8d6 <__floatsisf+0x48>
 8d2:	96 e9       	ldi	r25, 0x96	; 150
 8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <__floatsisf+0x6a>
 8d6:	77 23       	and	r23, r23
 8d8:	21 f0       	breq	.+8      	; 0x8e2 <__floatsisf+0x54>
 8da:	9e e8       	ldi	r25, 0x8E	; 142
 8dc:	87 2f       	mov	r24, r23
 8de:	76 2f       	mov	r23, r22
 8e0:	05 c0       	rjmp	.+10     	; 0x8ec <__floatsisf+0x5e>
 8e2:	66 23       	and	r22, r22
 8e4:	71 f0       	breq	.+28     	; 0x902 <__floatsisf+0x74>
 8e6:	96 e8       	ldi	r25, 0x86	; 134
 8e8:	86 2f       	mov	r24, r22
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	60 e0       	ldi	r22, 0x00	; 0
 8ee:	2a f0       	brmi	.+10     	; 0x8fa <__floatsisf+0x6c>
 8f0:	9a 95       	dec	r25
 8f2:	66 0f       	add	r22, r22
 8f4:	77 1f       	adc	r23, r23
 8f6:	88 1f       	adc	r24, r24
 8f8:	da f7       	brpl	.-10     	; 0x8f0 <__floatsisf+0x62>
 8fa:	88 0f       	add	r24, r24
 8fc:	96 95       	lsr	r25
 8fe:	87 95       	ror	r24
 900:	97 f9       	bld	r25, 7
 902:	08 95       	ret

00000904 <__fp_inf>:
 904:	97 f9       	bld	r25, 7
 906:	9f 67       	ori	r25, 0x7F	; 127
 908:	80 e8       	ldi	r24, 0x80	; 128
 90a:	70 e0       	ldi	r23, 0x00	; 0
 90c:	60 e0       	ldi	r22, 0x00	; 0
 90e:	08 95       	ret

00000910 <__fp_mintl>:
 910:	88 23       	and	r24, r24
 912:	71 f4       	brne	.+28     	; 0x930 <__fp_mintl+0x20>
 914:	77 23       	and	r23, r23
 916:	21 f0       	breq	.+8      	; 0x920 <__fp_mintl+0x10>
 918:	98 50       	subi	r25, 0x08	; 8
 91a:	87 2b       	or	r24, r23
 91c:	76 2f       	mov	r23, r22
 91e:	07 c0       	rjmp	.+14     	; 0x92e <__fp_mintl+0x1e>
 920:	66 23       	and	r22, r22
 922:	11 f4       	brne	.+4      	; 0x928 <__fp_mintl+0x18>
 924:	99 27       	eor	r25, r25
 926:	0d c0       	rjmp	.+26     	; 0x942 <__fp_mintl+0x32>
 928:	90 51       	subi	r25, 0x10	; 16
 92a:	86 2b       	or	r24, r22
 92c:	70 e0       	ldi	r23, 0x00	; 0
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	2a f0       	brmi	.+10     	; 0x93c <__fp_mintl+0x2c>
 932:	9a 95       	dec	r25
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	da f7       	brpl	.-10     	; 0x932 <__fp_mintl+0x22>
 93c:	88 0f       	add	r24, r24
 93e:	96 95       	lsr	r25
 940:	87 95       	ror	r24
 942:	97 f9       	bld	r25, 7
 944:	08 95       	ret

00000946 <__fp_mpack>:
 946:	9f 3f       	cpi	r25, 0xFF	; 255
 948:	31 f0       	breq	.+12     	; 0x956 <__fp_mpack_finite+0xc>

0000094a <__fp_mpack_finite>:
 94a:	91 50       	subi	r25, 0x01	; 1
 94c:	20 f4       	brcc	.+8      	; 0x956 <__fp_mpack_finite+0xc>
 94e:	87 95       	ror	r24
 950:	77 95       	ror	r23
 952:	67 95       	ror	r22
 954:	b7 95       	ror	r27
 956:	88 0f       	add	r24, r24
 958:	91 1d       	adc	r25, r1
 95a:	96 95       	lsr	r25
 95c:	87 95       	ror	r24
 95e:	97 f9       	bld	r25, 7
 960:	08 95       	ret

00000962 <__fp_nan>:
 962:	9f ef       	ldi	r25, 0xFF	; 255
 964:	80 ec       	ldi	r24, 0xC0	; 192
 966:	08 95       	ret

00000968 <__fp_pscA>:
 968:	00 24       	eor	r0, r0
 96a:	0a 94       	dec	r0
 96c:	16 16       	cp	r1, r22
 96e:	17 06       	cpc	r1, r23
 970:	18 06       	cpc	r1, r24
 972:	09 06       	cpc	r0, r25
 974:	08 95       	ret

00000976 <__fp_pscB>:
 976:	00 24       	eor	r0, r0
 978:	0a 94       	dec	r0
 97a:	12 16       	cp	r1, r18
 97c:	13 06       	cpc	r1, r19
 97e:	14 06       	cpc	r1, r20
 980:	05 06       	cpc	r0, r21
 982:	08 95       	ret

00000984 <__fp_round>:
 984:	09 2e       	mov	r0, r25
 986:	03 94       	inc	r0
 988:	00 0c       	add	r0, r0
 98a:	11 f4       	brne	.+4      	; 0x990 <__fp_round+0xc>
 98c:	88 23       	and	r24, r24
 98e:	52 f0       	brmi	.+20     	; 0x9a4 <__fp_round+0x20>
 990:	bb 0f       	add	r27, r27
 992:	40 f4       	brcc	.+16     	; 0x9a4 <__fp_round+0x20>
 994:	bf 2b       	or	r27, r31
 996:	11 f4       	brne	.+4      	; 0x99c <__fp_round+0x18>
 998:	60 ff       	sbrs	r22, 0
 99a:	04 c0       	rjmp	.+8      	; 0x9a4 <__fp_round+0x20>
 99c:	6f 5f       	subi	r22, 0xFF	; 255
 99e:	7f 4f       	sbci	r23, 0xFF	; 255
 9a0:	8f 4f       	sbci	r24, 0xFF	; 255
 9a2:	9f 4f       	sbci	r25, 0xFF	; 255
 9a4:	08 95       	ret

000009a6 <__fp_split3>:
 9a6:	57 fd       	sbrc	r21, 7
 9a8:	90 58       	subi	r25, 0x80	; 128
 9aa:	44 0f       	add	r20, r20
 9ac:	55 1f       	adc	r21, r21
 9ae:	59 f0       	breq	.+22     	; 0x9c6 <__fp_splitA+0x10>
 9b0:	5f 3f       	cpi	r21, 0xFF	; 255
 9b2:	71 f0       	breq	.+28     	; 0x9d0 <__fp_splitA+0x1a>
 9b4:	47 95       	ror	r20

000009b6 <__fp_splitA>:
 9b6:	88 0f       	add	r24, r24
 9b8:	97 fb       	bst	r25, 7
 9ba:	99 1f       	adc	r25, r25
 9bc:	61 f0       	breq	.+24     	; 0x9d6 <__fp_splitA+0x20>
 9be:	9f 3f       	cpi	r25, 0xFF	; 255
 9c0:	79 f0       	breq	.+30     	; 0x9e0 <__fp_splitA+0x2a>
 9c2:	87 95       	ror	r24
 9c4:	08 95       	ret
 9c6:	12 16       	cp	r1, r18
 9c8:	13 06       	cpc	r1, r19
 9ca:	14 06       	cpc	r1, r20
 9cc:	55 1f       	adc	r21, r21
 9ce:	f2 cf       	rjmp	.-28     	; 0x9b4 <__fp_split3+0xe>
 9d0:	46 95       	lsr	r20
 9d2:	f1 df       	rcall	.-30     	; 0x9b6 <__fp_splitA>
 9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <__fp_splitA+0x30>
 9d6:	16 16       	cp	r1, r22
 9d8:	17 06       	cpc	r1, r23
 9da:	18 06       	cpc	r1, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	f1 cf       	rjmp	.-30     	; 0x9c2 <__fp_splitA+0xc>
 9e0:	86 95       	lsr	r24
 9e2:	71 05       	cpc	r23, r1
 9e4:	61 05       	cpc	r22, r1
 9e6:	08 94       	sec
 9e8:	08 95       	ret

000009ea <__fp_trunc>:
 9ea:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fp_splitA>
 9ee:	a0 f0       	brcs	.+40     	; 0xa18 <__fp_trunc+0x2e>
 9f0:	be e7       	ldi	r27, 0x7E	; 126
 9f2:	b9 17       	cp	r27, r25
 9f4:	88 f4       	brcc	.+34     	; 0xa18 <__fp_trunc+0x2e>
 9f6:	bb 27       	eor	r27, r27
 9f8:	9f 38       	cpi	r25, 0x8F	; 143
 9fa:	60 f4       	brcc	.+24     	; 0xa14 <__fp_trunc+0x2a>
 9fc:	16 16       	cp	r1, r22
 9fe:	b1 1d       	adc	r27, r1
 a00:	67 2f       	mov	r22, r23
 a02:	78 2f       	mov	r23, r24
 a04:	88 27       	eor	r24, r24
 a06:	98 5f       	subi	r25, 0xF8	; 248
 a08:	f7 cf       	rjmp	.-18     	; 0x9f8 <__fp_trunc+0xe>
 a0a:	86 95       	lsr	r24
 a0c:	77 95       	ror	r23
 a0e:	67 95       	ror	r22
 a10:	b1 1d       	adc	r27, r1
 a12:	93 95       	inc	r25
 a14:	96 39       	cpi	r25, 0x96	; 150
 a16:	c8 f3       	brcs	.-14     	; 0xa0a <__fp_trunc+0x20>
 a18:	08 95       	ret

00000a1a <__fp_zero>:
 a1a:	e8 94       	clt

00000a1c <__fp_szero>:
 a1c:	bb 27       	eor	r27, r27
 a1e:	66 27       	eor	r22, r22
 a20:	77 27       	eor	r23, r23
 a22:	cb 01       	movw	r24, r22
 a24:	97 f9       	bld	r25, 7
 a26:	08 95       	ret

00000a28 <round>:
 a28:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fp_splitA>
 a2c:	e8 f0       	brcs	.+58     	; 0xa68 <round+0x40>
 a2e:	9e 37       	cpi	r25, 0x7E	; 126
 a30:	e8 f0       	brcs	.+58     	; 0xa6c <round+0x44>
 a32:	96 39       	cpi	r25, 0x96	; 150
 a34:	b8 f4       	brcc	.+46     	; 0xa64 <round+0x3c>
 a36:	9e 38       	cpi	r25, 0x8E	; 142
 a38:	48 f4       	brcc	.+18     	; 0xa4c <round+0x24>
 a3a:	67 2f       	mov	r22, r23
 a3c:	78 2f       	mov	r23, r24
 a3e:	88 27       	eor	r24, r24
 a40:	98 5f       	subi	r25, 0xF8	; 248
 a42:	f9 cf       	rjmp	.-14     	; 0xa36 <round+0xe>
 a44:	86 95       	lsr	r24
 a46:	77 95       	ror	r23
 a48:	67 95       	ror	r22
 a4a:	93 95       	inc	r25
 a4c:	95 39       	cpi	r25, 0x95	; 149
 a4e:	d0 f3       	brcs	.-12     	; 0xa44 <round+0x1c>
 a50:	b6 2f       	mov	r27, r22
 a52:	b1 70       	andi	r27, 0x01	; 1
 a54:	6b 0f       	add	r22, r27
 a56:	71 1d       	adc	r23, r1
 a58:	81 1d       	adc	r24, r1
 a5a:	20 f4       	brcc	.+8      	; 0xa64 <round+0x3c>
 a5c:	87 95       	ror	r24
 a5e:	77 95       	ror	r23
 a60:	67 95       	ror	r22
 a62:	93 95       	inc	r25
 a64:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_mintl>
 a68:	0c 94 a3 04 	jmp	0x946	; 0x946 <__fp_mpack>
 a6c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_szero>

00000a70 <__udivmodhi4>:
 a70:	aa 1b       	sub	r26, r26
 a72:	bb 1b       	sub	r27, r27
 a74:	51 e1       	ldi	r21, 0x11	; 17
 a76:	07 c0       	rjmp	.+14     	; 0xa86 <__udivmodhi4_ep>

00000a78 <__udivmodhi4_loop>:
 a78:	aa 1f       	adc	r26, r26
 a7a:	bb 1f       	adc	r27, r27
 a7c:	a6 17       	cp	r26, r22
 a7e:	b7 07       	cpc	r27, r23
 a80:	10 f0       	brcs	.+4      	; 0xa86 <__udivmodhi4_ep>
 a82:	a6 1b       	sub	r26, r22
 a84:	b7 0b       	sbc	r27, r23

00000a86 <__udivmodhi4_ep>:
 a86:	88 1f       	adc	r24, r24
 a88:	99 1f       	adc	r25, r25
 a8a:	5a 95       	dec	r21
 a8c:	a9 f7       	brne	.-22     	; 0xa78 <__udivmodhi4_loop>
 a8e:	80 95       	com	r24
 a90:	90 95       	com	r25
 a92:	bc 01       	movw	r22, r24
 a94:	cd 01       	movw	r24, r26
 a96:	08 95       	ret

00000a98 <_exit>:
 a98:	f8 94       	cli

00000a9a <__stop_program>:
 a9a:	ff cf       	rjmp	.-2      	; 0xa9a <__stop_program>
